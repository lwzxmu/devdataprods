makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
##list(set = set, get = get,
## setsolve = setsolve,
## getsolve = getsolve)
}
makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
#list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
makeCacheMatrix <- function(x = matrix()) {
u <- NULL
set <- function(y) {
x <<- y
u <<- NULL
}
get <- function() x
setsolve <- function(solve) u <<- solve
getsolve <- function() u
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
u <- NULL
set <- function(y) {
x <<- y
u <<- NULL
}
get <- function() x
setsolve <- function(solve) u <<- solve
getsolve <- function() u
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
u <- x$getsolve()
if(!is.null(u)) {
message("i'm busy right now getting cached data")
return(u)
}
data <- x$get()
u <- solve(data, ...)
x$setsolve(u)
u
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
u <- NULL
set <- function(y) {
x <<- y
u <<- NULL
}
get <- function() x
getsolve <- function(solve) u <<- solve
putsolve <- function() u
list(set = set, get = get,
getsolve = getsolve,
putsolve = putsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
u <- x$putsolve()
if(!is.null(u)) {
message("busy right now getting cached data")
return(u)
}
data <- x$get()
u <- solve(data, ...)
x$getsolve(u)
u
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## This function creates a special "matrix" object that can cache its
## inverse.
makeCacheMatrix <- function(x = matrix()) {
u <- NULL
set <- function(y) {
x <<- y
u <<- NULL
}
get <- function() x
getsolve <- function(solve) u <<- solve
putsolve <- function() u
list(set = set, get = get,
getsolve = getsolve,
putsolve = putsolve)
}
## Write a short comment describing this function
## This function computes the inverse of the special
## "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
u <- x$putsolve()
if(!is.null(u)) {
message("busy right now getting cached data")
return(u)
}
data <- x$get()
u <- solve(data, ...)
x$getsolve(u)
u
}
p<-matrix(1:9,3,3)
p
makeCacheMatrix(p)
cacheSolve()
cacheSolve(makeCacheMatrix(p))
cacheSolve()
?image
pic<-matrix(1:16,4,4)
image(pic)
?arima
choose(9,3)
?rpois
ppois(10,5,lower.tail=TRUE)
dpois(3,5)
sapply(list(1:3,5),dpois)
dpois(1:3,5)
0.03368973+0.08422434+0.14037390
ppois(3,5)
pnorm(mean=80,sd=10)
?pnorm
pnorm(70,mean=80,sd=10)
qnorm(95,mean=1100,sd=75)
qnorm(.95,mean=1100,sd=75)
?rbinos
?rbino
?pbinom
pbinom(4:5,5,.5)
dbinom(4:5,5,.5)
sum(dbinom(4:5,5,.5))
1/12
1/sqrt(12000)
.8-(6/7)
(.3*6/7 - .8)/.7
(.7-(.8*(6/8)))/.2
qnorm(c(14,16),mean=15,sd=10)
pnorm(c(14,16),mean=15,sd=10)
0.4601722-0.5398278
pnorm(c(14,16),mean=15,sd=10/sqrt(10))
0.3759148-0.6240852
30/52
qnorm(.95,mean=1100,sd=7.5)
?ppois
ppois(10,15)
1/sqrt(1200)
dpois(10,15)
dpois(c(1:10),15)
sum(dpois(c(1:10),15))
?power
?power.norm
?power.t.test
?power.t.test
?root
power.t.test(n=100,delta=.01,sd=.04,sig.level=.05)
power.t.test(n=100,delta=.01,sd=.04,sig.level=.05,alternative=one.sided)
power.t.test(n=100,delta=.01,sd=.04,sig.level=.05,alternative="one.sided")
power.t.test(n=100,delta=.01,sd=.04,sig.level=.05,type="paired",alternative="one.sided")
power.t.test(delta=.01,sd=.04,sig.level=.05,power=.9,type="paired",alternative="one.sided")
?pt
pt(-2.261646358,4)
2*pt(-2.261646358,4)
?pbinom
pbinom(3,4,0.5)
set.seed(1)
rpois(5,2)
?lm
set.seed(1)
rpois(5, 2)
install.packages("swirl")
library(swirl)
swirl()
rm()
?rm
head(airquality)
airquality
library(lattice)
library(datasets)
xyplot(Solar.R~Temp,|Month,data=airquality,layout=1:5)
xyplot(Solar.R~Temp|Month,data=airquality,layout=1:5)
head(mtcars)
?mtcars
xyplot(drat~wt|cyl,data=mtcars)
?xyplot
library(lattice)
library(datasets)
xyplot(drat~wt|cyl,data=mtcars,panel=function(x,y,...){
panel.xyplot(x,y,...)
panel.lmline(x,y,col="red")
})
library(lattice)
library(datasets)
xyplot(drat~wt|cyl,data=mtcars,panel=function(x,y,...){
panel.xyplot(x,y,...)
panel.lmline(x,y,col="red"),
main="aoisjdoaid",
xlab="asdas"
ylab="asd"
})
library(lattice)
library(datasets)
xyplot(drat~wt|cyl,data=mtcars,panel=function(x,y,...){
panel.xyplot(x,y,...)
panel.lmline(x,y,col="red"),
xlab="asdas"
ylab="asd"
})
?xyplot
library(lattice)
library(datasets)
xyplot(drat~wt|cyl,data=mtcars,panel=function(x,y,...){
panel.xyplot(x,y,...)
panel.lmline(x,y,col="red"),
xlab="asdas",
ylab="asd",
})
example(xyplot)
example(lattice)
example(ggplot2)
example(ggplot)
library(ggplot2)
example(ggplot2)
?ggplot2
?lattice
example(xyplot)
library(ggplot2)
example(qplot)
head(maacs)
?qplot
?ggplot
example(ggplot)
seq(0,1,length=4)
cutpoints<-quantile(airquality$Temp,seq(0,1,length=4),na.rm=TRUE)
a<-cut(airquality$Temp,cutpoints)
a
levels(a)
str(a)
set.seed(1)
xy<-data.frame(x=rnorm(100),y=rpois(100,2))
View(xy)
xydist<-dist(xy)
xydist
hCluster<-hclust(xydist)
str(xydist)
str(hCluster)
print(hCloster)
print(hCluster)
plot(hCluster)
qplot(hCluster)
plot(hCluster)
nba<- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
View(nba)
nba <- nba[order(nba$PTS),]
View(nba)
row.names(nba) <- nba$Name
View(nba)
nba <- nba[,-1]
View(nba)
nba_matrix <- data.matrix(nba)
View(nba_matrix)
heatmap(nba_matrix, Rowv=NA, Colv=NA, col=cm.colors(256), revC=FALSE, scale='column')
heatmap(nba_matrix, Rowv=NA, Colv=NA, col=cm.colors(256), scale='column')
heatmap(nba_matriï¼‰
heatmap(nba_matrix)
heatmap(nba_matrix,col=cm.colors(256))
heatmap(nba_matrix,col=cm.colors(256),scale='column')
library(grDevices)
example(colorRamp)
?colorRamp
example(colorRampPalette)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
example(xyplot)
qplot(votes, rating, data = movies, panel = panel.loess)
?qplot
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
unzip
str(unzip)
setwd("E:/Rdir/exdata2")
getwd()
install.packages("shiny")
library(shiny)
shiny::runExample("01_Hello")
getwd()
setwd("E:/Rdir/devdataprod")
setwd("E:/Rdir/")
setwd("E:/Rdir/devdataprods")
runApp("~/shinyapp")
runApp("~/shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
?shiny
?numericInput
get.systemtime
?base
library(help = "base")
sys.time()
Sys.time()
class(Sys.time())
date()
months(date())
Sys.Date()
year(Sys.Date())
years(Sys.Date())
months(Sys.Date())
?Sys.Date()
?Sys.Date()
annual(Sys.Date())
?months
runApp("./shinyapp")
?dateInput
date()
Sys.Date()
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
?verbatimTextOutput
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
?verbatimTextOutput
runApp("./shinyapp")
class(Sys.Date())
as.POSIXlt(Sys.Date())
class(as.POSIXlt(Sys.Date()))
as.POSIXlt(Sys.Date())
as.POSIXlt(Sys.Date())$1
as.POSIXlt(Sys.Date())$year
as.POSIXlt(Sys.Date())$month
str(as.POSIXlt(Sys.Date()))
summary(as.POSIXlt(Sys.Date()))
dayOfYear(Sys.Date())
?date
date()
str(date())
example(Sys.Date)
Sys.Date()
str(Sys.Date())
as.char
format(Sys.Date(),"%Y")
class(format(Sys.Date(),"%Y"))
as.numeric(format(Sys.Date(),"%Y"))
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
as.numeric(format(input$birth, "%Y"))%12
as.numeric(format(input$birth, "%Y"))
as.numeric(format(Sys.Date(), "%Y"))
as.numeric(format(Sys.Date(), "%Y"))%12
as.numeric(format(Sys.Date(), "%Y"))%%12
?ifelse
(as.numeric(format(Sys.Date(), "%Y"))-1901)%%12
(as.numeric(1994, "%Y"))-1901)%%12
(1994-1901)%%12
(1994-1900)%%12
(1994-1989)%%12
(1994-1899)%%12
(1901-1899)%%12
(1995-1899)%%12
runApp("./shinyapp")
runApp("./shinyapp")
rep(0,12)
factor(rep(0,12))
factor(rep(1,12))
factor(rep(2,12))
factor(rep(1,12))
(as.numeric(format(input$birth, "%Y")) - 1899)%%12 + 1
(as.numeric(1994 - 1899)%%12 + 1
)
(as.numeric(1994 - 1898)%%12 + 1)
(as.numeric(1994 - 1990)%%12 + 1)
(as.numeric(1994 - 1900)%%12 + 1)
zodiac <- function(as.numeric(format(input$birth, "%Y"))){
zd <- c("Rat", "Ox","Tiger","Rabbit","Dragon","Snake","Horse","Goat","Monkey","Rooster","Dog","Pig")
a <- (as.numeric(format(input$birth, "%Y")) - 1900)%%12 + 1
return(zd[fa])
}
zodiac <- function(){
zd <- c("Rat", "Ox","Tiger","Rabbit","Dragon","Snake","Horse","Goat","Monkey","Rooster","Dog","Pig")
a <- (as.numeric(format(input$birth, "%Y")) - 1900)%%12 + 1
return(zd[fa])
}
zodiac(1994)
zodiac <- function(birthyear){
zd <- c("Rat", "Ox","Tiger","Rabbit","Dragon","Snake","Horse","Goat","Monkey","Rooster","Dog","Pig")
a <- (birthyear - 1900)%%12 + 1
return(zd[fa])
}
zodiac(1994)
zodiac <- function(birthyear){
zd <- c("Rat", "Ox","Tiger","Rabbit","Dragon","Snake","Horse","Goat","Monkey","Rooster","Dog","Pig")
a <- (birthyear - 1900)%%12 + 1
return(zd[a])
}
zodiac(1994)
zodiac(1993)
zodiac(1995)
runApp("shinyapp/")
runApp("./shinyapp/")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
?date
?Sys.Date
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
?paste
paste("1","2")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
